====================================================================================================================================
VIDEOS RECOMENDADOS EN YOUTUBE
====================================================================================================================================
- https://www.youtube.com/watch?v=0eWrpsCLMJQ&list=PLC3y8-rFHvwhBRAgFinJR8KHIrCdTkZcZ
 - https://www.youtube.com/watch?v=Nehk4tBxD4o
 - https://www.youtube.com/watch?v=yAT2HHusDDk
 - https://www.youtube.com/watch?v=arGRTVdG--c   ==> Es el video del CRUD

====================================================================================================================================
INSTALADORES
====================================================================================================================================
- NODEJS: https://nodejs.org/en/
- https://cli.angular.io/

====================================================================================================================================
COMANDOS
====================================================================================================================================
- Crear un proyecto: ng new my-dream-app
- Crear un componente: ng g c 'nombre_componente' 
- Crear un servicio: ng g s 'nombre_servicio'
- Crear una clase: ng g cl 'nombre_servicio'
- Crear una interface: ng g i modelo/iempleado

====================================================================================================================================
CONOCEPTOS
====================================================================================================================================

- Referente a las 3 diferentes maneras de indicar el 'selector' en un componente y como dependiendo de este lo invoco, así:
   - Definicion 1: selector: 'app-comptest1' , entonces lo invoco con etiquetas: <app-comptest1></app-comptest1>
   - Definicion 2: selector: '.app-comptest1', entonces lo invoco como una clase dentro de una etiqueta html: <div class="app-comptest1"></div>
   - Definicion 3: selector: '[app-comptest1]', entonces lo invoco como una propiedad dentro de una etiqueta html: <div app-comptest1></div>


- INTERPOLATION: Esto es cuando defino una variable y/o funcion dentro del elemento clase ts, es decir donde se crea la logica y lo presento en la vista, es decir en el elemento html
   - Ejemplo: 
      - defino la variable nombre en el elemento ts:
         public nombre: string = "Carlos Jimenez";
      - la invoco desde el elemento html, así:
         <p>Variable nombre invocada por string interpolaton: <b>{{nombre}}</b></p>
   - Ejemplo 2:
      - defino el metodo que concatena la variable del punto anterior y retorna un string:
           getSaludar(){
                return "Hola señor:" + this.nombre;
            }
      - la invoco desde el elemento html, así:
         <p>Invocando un método por interpolaton: <b>{{getSaludar()}}</b></p>


- PROPERTY BINDING: Cuando necesito adicionar el valor de un atributo de un componente html desde una variable de una clase, puedo hacerlo por interpolación y/o por property binding 
      - Ejemplo:
         - defino la variable en la clase ts:
            public identificador: string = "textoNombre";
         - Para invocar este desde el html tengo dos posiblilidades la primera por interpolacion o la segunda por property binding
            <input type="text"  id="{{identificador}}" value="Jorge J" />
            <input type="text"  [id]="identificador" value="Carlos J" />
         
- CLASS BINDING: Consiste en dar el estilo de visualizacion de un componente desde la variable definida en el cofigo del elemento ts.
   - Ejemplo 1:
      - Defino dos clases en el elemento css, así:
            .texto-titulo{
                color: red;
                font-size: 40px;
            }

            .texto-mensajes{
                color: blue;
                font-size: 20px;
            }

      - Defino la variable con el valor que quiero utilizar, así:
         public claseUsar: string= "texto-mensajes";

      - Ahora, en el primer text asigno la clase directamente, pero en el segundo uso Class Binding:
         <p class="texto-titulo" >Ejemplo asignando directamente la clase</p>
         <p [class]="claseUsar" >Ejemplo asignandola por class binding</p>
     
     -Ejemplo 2: mostrar o no una clase dependiendo si una variable booleana esta prendida o no.
      - Defino la variable en el elemento ts:
            public textoEsTitulo: boolean = false;
      - Desde el html usando class binding asigno la clase y esta sera desplegada o no acorde con el valor de la variable en el elemento ts
            <p [class.texto-titulo]="textoEsTitulo" >Ejemplo por class binding usando un booleano desde el codigo</p>
      
      
- STYLE BINDING: Consiste en colocar el valor de un style, dependiendo del valor de una variable.
   - Ejemplo 1: Si un texto es importante lo muestro en verde sino lo es entonce en naranja
      - Defino la variable:
         public esTextoImportante: boolean = true;
      - Desde el html pregunto por la variable así:
         <p [style.color]="esTextoImportante ? 'green' : 'orange'" >Ejemplo de style binding</p>
         
   - Ejemplo 2: defini el color de la letra desde una variable y tomo su valor en el html.
      - Defino la variable en la clase:
         public colorLetra: string = "orange";
      - Desde el html tomo su valor:
         <p [style.color]="colorLetra" >Ejemplo de style binding</p>
         
   - Ejemplo 2: defino una variable compuesta y tomo su valor desde el html
      - Defino la siguiente variable compuesta desde el ts:
            public tiluloEspecial = {
                color: "blue",
                fontStyle: "italic"
            }

      - Tomo su valor desde el html, asi:
            <p [ngStyle]="tiluloEspecial" >Ejemplo de style binding</p>


- EVENT BINDING: Consiste en invocar un metodo desde la vista en este caso nuestro elemento html al elemento ts.
   - Ejemplo.
      - Creo el boton desde el html:
            <button (click)="imprimirLog()" >Hazme Click</button>
      - Creo el metodo desde el componente ts:
            imprimirLog(){
             console.log('Hola hicieron click en el boton');
           }
   
- TEMPLATE REFERENCE VARIABLES: Consiste en pasar la data de la vista (html) a la clase (ts)
   - Ejemplo:
      - Colocar componente de texto y boton en la vista html
            <input type="text" #myTexto1 />
            <button (click)="pasarDatos(myTexto1.value)"  >Ver dato</button>
      - En la clase ts se recibe como un parametro
           pasarDatos(dato){
             console.log('El dato en la caja es:' + dato);
           }      
- TWO WAY BINDING: Es tener counicacion em ambas vias, es decir que tanto vista como clase se alimentes del mismo valor.
     - Ejemplo:
      - Importar en app-modules la libreria FormModule y colocarla en el import.
            import { FormsModule } from '@angular/forms';
      - Definir la variable en la clase:
            public nombre: string = "Carlos Jimenez";
      - Referencias la variable en la vista asi:
            <input type="text"  [(ngModel)]="nombre"/>

====================================================================================================================================
STRUCTURAL DIRECTIVES
====================================================================================================================================

 DIRECTIVA ngIf: Permite tomar desiciones en la vista de renderizar o no un componente, deprendiendo de lo que queramos hacer.
    
      Ejemplo 1:
      
          - Defino la etiqueta sobre la vista e igualmente un boton que llama a la funcion para que cambie el valor de la variable;
               <p *ngIf="verTexto" >Este texto se vera o no dependiendo si la variable verTexto esta verdadera</p>
               <button (click)="visualizarTexto()" >Ver texto</button>
          - Defino una variable booleana en la clase y la pongo verdadero si quiero que el texto aparezca
               private verTexto: boolean = true;
               
               visualizarTexto(){
                  this.verTexto = ! this.verTexto;
               }
            
       Ejemplo 2: este incluye un sino, cuando el texto principal no se muestra así:
       
          - Defino un texto en la vista  que se muestra o no dependiendo del valor de una variable. Si esta es falsa, entonces se muestra el bloque por la opcion SINO
                    <p *ngIf="verTexto; else bloqueSiNo" >Este texto se vera o no dependiendo si la variable verTexto esta verdadera</p>
                    <ng-template #bloqueSiNo>
                        <p>El texto ha sido ocultado!!!</p>
                    </ng-template>
                    <button (click)="visualizarTexto()" >Ver texto</button>          
          - Sobre la clase defino la variable y el metodo que prende y apaga       
               private verTexto: boolean = true;
               
               visualizarTexto(){
                  this.verTexto = ! this.verTexto;
               }
               
        Ejemplo 3: este trabaja con las directivas then y else. Veamos:
               <div *ngIf="verTexto; then bloquePrincipal; else bloqueSecundario" ></div>
               <ng-template #bloquePrincipal>
                   <p>Estamos viendo el BLOQUE PRINCIPAL</p>
               </ng-template>
               <ng-template #bloqueSecundario>
                   <p>Estamos viendo el BLOQUE SECUNDARIO</p>
               </ng-template>
        
DIRECTIVA ngSwitch: Permite tomar decisiones en la capa de presentación de acuerdo a valores en la capa de control o clase.
    
       Ejemplo:
       
       - Desde la clase inicio una variable con un color.
               private colorLetra: string = "red";
       - Desde la capa de presentación se toma el comportamiento de visualización, acorde al color seleccionado
               <div [ngSwitch]="colorLetra">
                   <div *ngSwitchCase="'red'"> <p  [style.color]="colorLetra">   El color es rojo </p> </div>
                   <div *ngSwitchCase="'blue'"> <p [style.color]="colorLetra"> El color es azul </p> </div>
                   <div *ngSwitchCase="'yellow'"> <p [style.color]="colorLetra"> El color es amarillo </p> </div>
                   <div *ngSwitchDefault> <p> El color es indefinido </p> </div>
                   <p>Escribe el valor: red, blue o yellow</p><input type="text"   [(ngModel)]="colorLetra"/>
               </div>
       
       
DIRECTIVA ngFor: Se utiliza para recorrer estructuras de datos.
     
          Ejemplo:
            
            - En la clase defino un arreglo de colores asi:
                private colores = ["azul", "rojo", "amarillo", "rosado", "verde"];
                
            - Desde la capa de presentacióm imprimo una tabla mientras recorro el arreglo así:
                <table border="1" align="center" >
                   <tr>
                       <th>Indice</th>
                       <th>Color</th>
                   <tr>
                   <tr  *ngFor="let color of colores; index as i">
                       <td>{{ i }}</td>
                       <td>{{ color }}</td>
                   </tr>
               </table>
            
            
====================================================================================================================================
COMUNICATION - COMPONENT INTERACTION
====================================================================================================================================
   
PRIMERA INETRACCION DEL COMPONENTE PADRE AL COMPONENTE HIJO.

1. Sobre el componente hijo:
   - Defina en la clase la propiedad sobre la cual va a recibir  el dato:
      @Input('textohijo') public textoAPresentar: string;
      
   - Al colocar el decorador Input() este automaticamente importa la libreria, de no ser asi hagalo a mano:
      import { Component, OnInit, Input } from '@angular/core';
      
2. Sobre el componente padre:
   - En la vista invoque la propiedad del componente hijo:
      <app-hijo [textohijo]="texto" ></app-hijo>
   - En la clase, cree la variable en este caso texto, debe cuenta que se hace uso de Property Binding:
      public texto: string;
      

SEGUNDA INTERACCION DEL HIJO AL PADRE

1. Sobre el hijo:
   - Defina el evento que se va a disparar para pasar el dato al padre, esto sobre la clase
     @Output() public eventoHijo = new EventEmitter();
   
   - Tenga en cuenta de importar tanto EventEmitter como Output;
     import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';

   - Implemente la funcion que va a disparar el evento:
      enviarTextoAPadre(mitexto){
       this.eventoHijo.emit(mitexto);
      }

    - Defina sobre la vista el boton que va a disparar la accion implementada:
      <input type="text" #miTexto1/>
      <button  (click)="enviarTextoAPadre(miTexto1.value)" >Enviar a Padre</button>

2. Sobre el padre:
     - Defina sobre la vista el evento en el llamado al componente hijo
       <app-hijo [textohijo]="texto"  (eventoHijo)="mensajeDesdeHijo=$event"  ></app-hijo>
     - Defina la variabke en la clase a la cual se asigna el valor
       public mensajeDesdeHijo: string;
    
====================================================================================================================================
FORMATING  - PIPES
====================================================================================================================================

Para formatear desde cadenas, numeros, monedas y fechas.

Sobre la vista use pipe asi:

       <p>Textos</p>
       <p>{{ nombre | lowercase}}</p>
       <p>{{ nombre | uppercase}}</p>
       <p>{{ nombre | titlecase}}</p>
       <p>{{ nombre | slice:3:8}}</p>

       <p>Objetos JSON</p>
       <p>{{ tiluloEspecial | json }}</p>

       <p>Numeros</p>
       <p>{{ 233.458 | number:'1.2-6' }}</p>
       <p>{{ 3.458 | number:'2.2-3' }}</p>

       <p>Porcentajes</p>
       <p>{{ 0.25 | percent }}</p>

       <p>Monedas</p>
       <p>{{ 0.78 | currency }}</p>
       <p>{{ 65.09 | currency: 'GBP' }}</p>
       <p>{{ 65.09 | currency: 'COP' }}</p>

       <p>Fechas</p>
       <p>{{ fecha }}</p>
       <p>{{ fecha | date:'short' }}</p>
       <p>{{ fecha | date:'shortDate' }}</p>
       <p>{{ fecha | date:'shortTime' }}</p>


Es necesario las variables de JSON y Date desde la clase así:

        public fecha: Date = new Date();

        public tiluloEspecial = {
          color: "blue",
          fontStyle: "italic"
        }

 
====================================================================================================================================
SERVICES AND DI  (DEPENDENCY INJECTION) DESING PATTERN 
====================================================================================================================================

Un servicion nos sirve para entregar datos y para interactuar con aplicaciones fuera de nuestra aplicación. 
Para usar un servicio siga los siguientes pasos:

1. Cree el servicio con el comando: ng g s 'nombre_servicio'

     Ejemplo: ng g s /servicios/empleado
     
2. Creese el metodo que va a devolver los datos

    Ejemplo:
    
        import { Injectable } from '@angular/core';

        @Injectable({
          providedIn: 'root'
        })
        
        export class EmpleadoService {

          constructor() { }

          getEmpleados(){
            return [
                {id: 1, nombre: "Carlos Jimenez", edad: 47},
                {id: 1, nombre: "Roberto Vargas", edad: 32},
                {id: 1, nombre: "Juan Rodriguez", edad: 37},
                {id: 1, nombre: "Claudia Ballen", edad: 45}
            ];
          }
        }

     
3. Registre el servicio en app.modules.ts

   - Primero debe importarlo:
         import { EmpleadoService } from './servicios/empleado.service'
   - Luego debe incluirlo en la lista de providers
         providers: [EmpleadoService],
         
 4. Cree la clase que va a representar los registros retornados por el servicio:
 
    - Cree la clase con el comando: ng g cl modelo/empleado
    
    - Cree los campos en la clase:
              export class Empleado {
                  public id: number;
                  public nombre: string;
                  public edad: number;
              }
         
         
 4. Sobre el componente hago uso del servicio, defniendolo primero en el constructor y luego invocandolo en el ngOnInit
 
             import { Component, OnInit } from '@angular/core';
             import { EmpleadoService } from '../servicios/empleado.service';
             import { Empleado } from '../modelo/empleado';

             @Component({
               selector: 'app-empleado',
               templateUrl: './empleado.component.html',
               styleUrls: ['./empleado.component.css']
             })
             export class EmpleadoComponent implements OnInit {

               public listaEmpleados: Empleado[];

               constructor( private _empleadoService: EmpleadoService ) { }

               ngOnInit() {
                 this.listaEmpleados = this._empleadoService.getEmpleados();
               }

             }

====================================================================================================================================
HTTP AND OBSERVABLES AND RxJS
====================================================================================================================================
Para consumir los servicios HTTP.

1. Importe la libreria en el modulo app.module.ts
       import { HttpClientModule } from '@angular/common/http'

       imports: [
         BrowserModule,
         AppRoutingModule,
         FormsModule,
         HttpClientModule
       ],

2. Defina sobre el constructor del servicio la variable HttpClient

         import { Injectable } from '@angular/core';
         import { HttpClient } from '@angular/common/http';

         @Injectable({
           providedIn: 'root'
         })
         export class EmpleadoService {

           constructor(private _httpclient: HttpClient) { }

           getEmpleados(){
             return [
                 {id: 1, nombre: "Carlos Jimenez", edad: 47},
                 {id: 1, nombre: "Roberto Vargas", edad: 32},
                 {id: 1, nombre: "Juan Rodriguez", edad: 37},
                 {id: 1, nombre: "Claudia Ballen", edad: 45}
             ];
           }
         }

3. Elimine el arreglo (hard code) del metodo getEmpleados() e invoque el URL del servicio

         import { Injectable } from '@angular/core';
         import { HttpClient } from '@angular/common/http';
         import { Iempleado } from '../modelo/iempleado';
         import { Observable } from 'rxjs';

         @Injectable({
           providedIn: 'root'
         })
         export class EmpleadoService {

           private _url: string = "http://localhost:4200/assets/data/empleados.json"

           constructor(private _httpclient: HttpClient) { }

           getEmpleados(): Observable<Iempleado[]> {
             return this._httpclient.get<Iempleado[]>(this._url);
           }
         }
 4. Note que la linea: 
          return this._httpclient.get<Iempleado[]>(this._url);
          
    por tanto es necesario crear la interface Iempleado. Ejecute el comando:
         ng g i modelo/iempleado.
    
    Cree los campos en la interface:

         export interface Iempleado {
             id: number;
             nombre: string;
             edad: number;
         }
  
  5. Sobre el componente realice la invocación del metodo del servicio
         import { Component, OnInit } from '@angular/core';
         import { EmpleadoService } from '../servicios/empleado.service';
         import { Empleado } from '../modelo/empleado';

         @Component({
           selector: 'app-empleado',
           templateUrl: './empleado.component.html',
           styleUrls: ['./empleado.component.css']
         })
         export class EmpleadoComponent implements OnInit {

         public listaEmpleados: Empleado[];

         constructor( private _empleadoService: EmpleadoService ) { }

         ngOnInit() {
             this._empleadoService.getEmpleados()
                   .subscribe( data => this.listaEmpleados = data) ;
           }
         }
  
  
====================================================================================================================================
HTTP ERROR HANDLING
====================================================================================================================================
  
PENDIENTE POR INVESTIGAR!!!!!    
    


